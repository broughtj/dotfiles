#+TITLE: Emacs Config
#+PROPERTY: header-args:emacs-lisp :tangle config.el :mkdirp yes
#+STARTUP: content

* Bootstrap use-package with elpaca

#+begin_src emacs-lisp
(elpaca elpaca-use-package
  (elpaca-use-package-mode))

;; Install other packages automatically by default
(setq use-package-always-ensure t)
#+end_src

* Auto-tangle on save

#+begin_src emacs-lisp
(defun my/org-babel-tangle-config ()
  (when (string-equal (buffer-file-name)
                      (expand-file-name "config.org" user-emacs-directory))
    (let ((org-confirm-babel-evaluate nil))
      (org-babel-tangle))))
(add-hook 'org-mode-hook
          (lambda () (add-hook 'after-save-hook #'my/org-babel-tangle-config nil t)))
#+end_src

* Evil Mode

#+begin_src emacs-lisp
(use-package evil
  :init
  (setq evil-want-integration t
        evil-want-keybinding nil)
  :config
  (evil-mode 1))
#+end_src

* which-key

#+begin_src emacs-lisp
(use-package which-key
  :init
  (setq which-key-idle-delay 0.8)  ;; delay in seconds before popup
  :config
  (which-key-mode))
#+end_src

#+begin_src emacs-lisp
(setq which-key-max-description-length 50)
(setq which-key-separator " → " )
(setq which-key-prefix-prefix "+")
(setq which-key-allow-imprecise-window-fit t)
#+end_src

** which-key appearance (customized for ef-dream)

#+begin_src emacs-lisp
(with-eval-after-load 'which-key
  (set-face-attribute 'which-key-key-face nil :weight 'bold)
  (set-face-attribute 'which-key-separator-face nil :foreground "gray60")
  (set-face-attribute 'which-key-note-face nil :foreground "orchid")
  (set-face-attribute 'which-key-command-description-face nil :foreground "light steel blue")
  (set-face-attribute 'which-key-local-map-description-face nil :foreground "light salmon"))
#+end_src

* general.el — Leader Key and Keybindings

#+begin_src emacs-lisp
(use-package general
  :demand t
  :config
  (general-create-definer tjb/leader-key
    :keymaps '(normal visual emacs)
    :prefix "SPC"
    :global-prefix "C-SPC")

  (tjb/leader-key
    ;; Files
    "f"  '(:ignore t :which-key "files")
    "f f" '(find-file :which-key "find file")
    "f r" '(recentf-open-files :which-key "recent files")

    ;; Buffers
    "b"  '(:ignore t :which-key "buffers")
    "b b" '(switch-to-buffer :which-key "switch buffer")
    "b k" '(kill-buffer :which-key "kill buffer")

    ;; Dired 
    "e" '(:ignore t :which-key "explorer")
    "e d" '(dired :which-key "dired")

    ;; LSP
    "l" '(:ignore t :which-key "lsp")
    "l r" '(lsp-rename :which-key "rename symbol")
    "l a" '(lsp-execute-code-action :which-key "code action")
    "l d" '(lsp-find-definition :which-key "go to def")
    "l t" '(lsp-find-type-definition :which-key "type def")
    "l i" '(lsp-find-implementation :which-key "implementation")
    "l e" '(lsp-treemacs-errors-list :which-key "errors")

    ;; Toggles
    "t" '(:ignore t :which-key "toggles")
    "t l" '(display-line-numbers-mode :which-key "line numbers")
    "t t" '(visual-line-mode :which-key "soft wrap lines")
    "t v" '(variable-pitch-mode :which-key "variable-pitch mode")

    ;; Windows
    "w" '(:ignore t :which-key "windows")
    "w v" '(split-window-right :which-key "split vertically")
    "w s" '(split-window-below :which-key "split horizontally")
    "w d" '(delete-window :which-key "delete window")
    "w o" '(delete-other-windows :which-key "delete others")
    "w h" '(windmove-left :which-key "move left")
    "w l" '(windmove-right :which-key "move right")
    "w j" '(windmove-down :which-key "move down")
    "w k" '(windmove-up :which-key "move up")

    ;; Git (Magit)
    "g" '(:ignore t :which-key "git")
    "g g" '(magit-status :which-key "status")))
#+end_src

#+begin_src emacs-lisp
(setq which-key-show-prefix 'top)
#+end_src


* Org

** Enabling Table of Contents

#+begin_src emacs-lisp :lexical t
;; Org 

(use-package toc-org
    :commands toc-org-enable
    :init (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src


** Enabling Org Bullets

Org-bullets gives us attractive bullets rather than asterisks.

#+begin_src emacs-lisp :lexical t
(add-hook 'org-mode-hook 'org-indent-mode)
(use-package org-bullets)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src


** Org Level Headers

#+begin_src emacs-lisp
;; (custom-set-faces
;;  '(org-level-1 ((t (:inherit outline-1 :height 1.5))))
;;  '(org-level-2 ((t (:inherit outline-2 :height 1.4))))
;;  '(org-level-3 ((t (:inherit outline-3 :height 1.3))))
;;  '(org-level-4 ((t (:inherit outline-4 :height 1.2))))
;;  '(org-level-5 ((t (:inherit outline-5 :height 1.1))))
;;  '(org-level-6 ((t (:inherit outline-5 :height 1.0))))
;;  '(org-level-7 ((t (:inherit outline-5 :height 0.9)))))
#+end_src

** Source Code Block Tag Expansion

Org-tempo is not a separate package but a module within org that can be enabled.  Org-tempo allows for '<s' followed by TAB to expand to a begin_src tag.  Other expansions available include:

| Typing the below + TAB | Expands to ...                          |
|------------------------+-----------------------------------------|
| <a                     | '#+BEGIN_EXPORT ascii' … '#+END_EXPORT  |
| <c                     | '#+BEGIN_CENTER' … '#+END_CENTER'       |
| <C                     | '#+BEGIN_COMMENT' … '#+END_COMMENT'     |
| <e                     | '#+BEGIN_EXAMPLE' … '#+END_EXAMPLE'     |
| <E                     | '#+BEGIN_EXPORT' … '#+END_EXPORT'       |
| <h                     | '#+BEGIN_EXPORT html' … '#+END_EXPORT'  |
| <l                     | '#+BEGIN_EXPORT latex' … '#+END_EXPORT' |
| <q                     | '#+BEGIN_QUOTE' … '#+END_QUOTE'         |
| <s                     | '#+BEGIN_SRC' … '#+END_SRC'             |
| <v                     | '#+BEGIN_VERSE' … '#+END_VERSE'         |

#+begin_src emacs-lisp 
(require 'org-tempo)
#+end_src


* Magit 

* Git: Magit

#+begin_src emacs-lisp :lexical t
(use-package magit
  :commands (magit-status))
#+end_src

*
Theme: ef-melissa-dark
#+begin_src emacs-lisp :lexical t
(use-package ef-themes
  :config
  ;(load-theme 'ef-dark :no-confirm))
  (load-theme 'ef-melissa-dark :no-confirm))
#+end_src

* UI Tweaks

#+begin_src emacs-lisp
;; Already set in early-init.el for startup performance
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
(setq ring-bell-function 'ignore)
(global-hl-line-mode 1)
(global-display-line-numbers-mode 1)
(prefer-coding-system 'utf-8)
#+end_src



* Modern Minibuffer Completion Stack

#+begin_src emacs-lisp :lexical t
;; Vertico for vertical minibuffer completion UI
(use-package vertico
  :init
  (vertico-mode))

;; Orderless for flexible matching (e.g. "f b" matches "find-buffer")
(use-package orderless
  :custom
  (completion-styles '(orderless basic))
  (completion-category-overrides '((file (styles partial-completion)))))

;; Marginalia for inline annotations (buffers, commands, etc.)
(use-package marginalia
  :init
  (marginalia-mode))

;; Consult for better M-x, buffer switching, grep, etc.
(use-package consult
  :bind
  (("C-s" . consult-line)
   ("C-x b" . consult-buffer)
   ("M-y" . consult-yank-pop)))

;; Embark: minibuffer actions menu
(use-package embark
  :bind
  (("C-." . embark-act)         ;; alternative to right-click
   ("C-;" . embark-dwim)        ;; smarter default action
   ("C-h B" . embark-bindings)) ;; describe-bindings alternative
  :init
  (setq prefix-help-command #'embark-prefix-help-command))

;; Optional: combine embark + consult
(use-package embark-consult
  :after (embark consult))

;; Corfu: popup in-buffer completions
(use-package corfu
  :init
  (global-corfu-mode)
  :custom
  (corfu-auto t)
  (corfu-cycle t)
  (corfu-preview-current nil))

;; Optional: add icons to completion popup (requires nerd-icons)
;; (use-package nerd-icons-corfu
;;   :after corfu
;;   :init (add-to-list 'corfu-margin-formatters #'nerd-icons-corfu-formatter))
#+end_src


#+begin_src emacs-lisp :lexical t
(setq completion-ignore-case t
      read-file-name-completion-ignore-case t
      read-buffer-completion-ignore-case t)
#+end_src


* Language Server Protocol (LSP) Support

#+begin_src emacs-lisp :lexical t
(use-package lsp-mode
  :commands (lsp lsp-deferred)
  :hook ((python-mode . lsp-deferred)
         (julia-mode . lsp-deferred))
  :init
  (setq lsp-keymap-prefix "C-c l")  ;; optional, use `which-key` for discoverability
  :config
  (setq lsp-enable-symbol-highlighting t
        lsp-enable-on-type-formatting nil
        lsp-headerline-breadcrumb-enable t))

(use-package lsp-ui
  :after lsp-mode
  :commands lsp-ui-mode
  :config
  (setq lsp-ui-doc-enable t
        lsp-ui-doc-position 'at-point
        lsp-ui-sideline-enable t
        lsp-ui-sideline-show-hover t
        lsp-ui-sideline-show-diagnostics t))
#+end_src


* Julia

#+begin_src emacs-lisp :lexical t
;;; Julia 

;; julia-mode
(use-package julia-mode
  :mode "\\.jl\\'")

;; julia: lsp support (ensure LanguageServer.jl is installed in Julia)
(use-package lsp-julia
  :after lsp-mode
  :config
  (setq lsp-julia-default-environment "~/.julia/environments/v1.11")) 

;; org-babel for julia
(org-babel-do-load-languages
 'org-babel-load-languages
 '((julia . t)))

(use-package ob-julia
  :ensure nil ;; built-in if Org is recent
  :after org)
#+end_src


* Modeline

The modeline is the bottom status bar that appears in Emacs windows.  While you can create your own custom modeline, why go to the trouble when Doom Emacs already has a nice modeline package available.  For more information on what is available to configure in the Doom modeline, check out: [[https://github.com/seagle0128/doom-modeline][Doom Modeline]]

#+begin_src emacs-lisp :lexical t
(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1)
  :config
  (setq doom-modeline-height 15      ;; sets modeline height
        doom-modeline-bar-width 5    ;; sets right bar width
        doom-modeline-persp-name t   ;; adds perspective name to modeline
        doom-modeline-persp-icon t)) ;; adds folder icon next to persp name
#+end_src

* Shells and Terminals 

TODO: configure this bit! 
