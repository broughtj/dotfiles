#+TITLE: Emacs Config
#+PROPERTY: header-args:emacs-lisp :tangle config.el :mkdirp yes
#+STARTUP: content

* Bootstrap use-package with elpaca

#+begin_src emacs-lisp
(elpaca elpaca-use-package
  (elpaca-use-package-mode))

;; Install other packages automatically by default
(setq use-package-always-ensure t)
#+end_src

* Auto-tangle on save

#+begin_src emacs-lisp
(defun my/org-babel-tangle-config ()
  (when (string-equal (buffer-file-name)
                      (expand-file-name "config.org" user-emacs-directory))
    (let ((org-confirm-babel-evaluate nil))
      (org-babel-tangle))))
(add-hook 'org-mode-hook
          (lambda () (add-hook 'after-save-hook #'my/org-babel-tangle-config nil t)))
#+end_src

* Evil Mode

#+begin_src emacs-lisp
(use-package evil
  :init
  (setq evil-want-integration t
        evil-want-keybinding nil)
  :config
  (evil-mode 1))
#+end_src

* which-key

#+begin_src emacs-lisp
(use-package which-key
  :init
  (setq which-key-idle-delay 0.8)  ;; delay in seconds before popup
  :config
  (which-key-mode))
#+end_src

#+begin_src emacs-lisp
(setq which-key-max-description-length 50)
(setq which-key-separator " → " )
(setq which-key-prefix-prefix "+")
(setq which-key-allow-imprecise-window-fit t)
#+end_src

** which-key appearance (customized for ef-dream)

#+begin_src emacs-lisp
(with-eval-after-load 'which-key
  (set-face-attribute 'which-key-key-face nil :weight 'bold)
  (set-face-attribute 'which-key-separator-face nil :foreground "gray60")
  (set-face-attribute 'which-key-note-face nil :foreground "orchid")
  (set-face-attribute 'which-key-command-description-face nil :foreground "light steel blue")
  (set-face-attribute 'which-key-local-map-description-face nil :foreground "light salmon"))
#+end_src

* general.el — Leader Key and Keybindings

#+begin_src emacs-lisp
(use-package general
  :demand t
  :config
  (general-create-definer tjb/leader-key
    :keymaps '(normal visual emacs)
    :prefix "SPC"
    :global-prefix "C-SPC")

  (tjb/leader-key
    ;; Files
    "f"  '(:ignore t :which-key "files")
    "f f" '(find-file :which-key "find file")
    "f r" '(recentf-open-files :which-key "recent files")

    ;; Buffers
    "b"  '(:ignore t :which-key "buffers")
    "b b" '(switch-to-buffer :which-key "switch buffer")
    "b k" '(kill-buffer :which-key "kill buffer")

    ;; Toggles
    "t" '(:ignore t :which-key "toggles")
    "t l" '(display-line-numbers-mode :which-key "line numbers")
    "t t" '(visual-line-mode :which-key "soft wrap lines")
    "t v" '(variable-pitch-mode :which-key "variable-pitch mode")

    ;; Windows
    "w" '(:ignore t :which-key "windows")
    "w v" '(split-window-right :which-key "split vertically")
    "w s" '(split-window-below :which-key "split horizontally")
    "w d" '(delete-window :which-key "delete window")
    "w o" '(delete-other-windows :which-key "delete others")
    "w h" '(windmove-left :which-key "move left")
    "w l" '(windmove-right :which-key "move right")
    "w j" '(windmove-down :which-key "move down")
    "w k" '(windmove-up :which-key "move up")

    ;; Git (Magit)
    "g" '(:ignore t :which-key "git")
    "g g" '(magit-status :which-key "status")))
#+end_src

#+begin_src emacs-lisp
(setq which-key-show-prefix 'top)
#+end_src


* Magit 

* Git: Magit

#+begin_src emacs-lisp :lexical t
(use-package magit
  :commands (magit-status))
#+end_src

* Theme: ef-dream

#+begin_src emacs-lisp :lexical t
(use-package ef-themes
  :config
  (load-theme 'ef-dark :no-confirm))
#+end_src

* UI Tweaks

#+begin_src emacs-lisp
;; Already set in early-init.el for startup performance
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
(setq ring-bell-function 'ignore)
(global-hl-line-mode 1)
(global-display-line-numbers-mode 1)
(prefer-coding-system 'utf-8)
#+end_src



* Modern Minibuffer Completion Stack

#+begin_src emacs-lisp :lexical t
;; Vertico for vertical minibuffer completion UI
(use-package vertico
  :init
  (vertico-mode))

;; Orderless for flexible matching (e.g. "f b" matches "find-buffer")
(use-package orderless
  :custom
  (completion-styles '(orderless basic))
  (completion-category-overrides '((file (styles partial-completion)))))

;; Marginalia for inline annotations (buffers, commands, etc.)
(use-package marginalia
  :init
  (marginalia-mode))

;; Consult for better M-x, buffer switching, grep, etc.
(use-package consult
  :bind
  (("C-s" . consult-line)
   ("C-x b" . consult-buffer)
   ("M-y" . consult-yank-pop)))

;; Embark: minibuffer actions menu
(use-package embark
  :bind
  (("C-." . embark-act)         ;; alternative to right-click
   ("C-;" . embark-dwim)        ;; smarter default action
   ("C-h B" . embark-bindings)) ;; describe-bindings alternative
  :init
  (setq prefix-help-command #'embark-prefix-help-command))

;; Optional: combine embark + consult
(use-package embark-consult
  :after (embark consult))

;; Corfu: popup in-buffer completions
(use-package corfu
  :init
  (global-corfu-mode)
  :custom
  (corfu-auto t)
  (corfu-cycle t)
  (corfu-preview-current nil))

;; Optional: add icons to completion popup (requires nerd-icons)
;; (use-package nerd-icons-corfu
;;   :after corfu
;;   :init (add-to-list 'corfu-margin-formatters #'nerd-icons-corfu-formatter))
#+end_src


#+begin_src emacs-lisp :lexical t
(setq completion-ignore-case t
      read-file-name-completion-ignore-case t
      read-buffer-completion-ignore-case t)
#+end_src
