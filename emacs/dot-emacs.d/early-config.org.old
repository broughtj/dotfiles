#+title: TJB's Literate Emacs =early-init= Configuration
#+author: Tyler J. Brough 
#+email: broughtj@gmail.com
#+language: en
#+options: ':t toc:nil num:t author:t email:t
#+startup: content indent
#+property: header-args:emacs-lisp :tangle ./early-init.el  
   

* Bootstrapping 

** early-init 

Emacs 27.0 introduced an =early-init.el= file. It allows customization before package and UI initialization. 

#+begin_src emacs-lisp :lexical t
;;; early-init.el -- Emacs pre package.el & GUI configuration -*- lexical-binding: t; -*-
;;; Code:
#+end_src 

#+begin_src emacs-lisp :lexical t
(setq package-enable-at-startup nil)
(setq inhibit-default-init nil)
#+end_src

#+begin_src emacs-lisp :lexical t
(setq native-comp-async-report-warnings-errors nil)
#+end_src


*** file-name-handler-alist

Skipping a bunch of regular expression searching in the =file-name-handler-alist= should improve start time.

#+begin_src emacs-lisp :lexical t
(defvar default-file-name-handler-alist file-name-handler-alist)
(setq file-name-handler-alist nil)
#+end_src


*** Garbage Collection

=gc-cons-threshold= (800 KB) and =gc-cons-percentage= (0.1) control when the Emacs garbage collector can kick in.
Temporarily turning these off during init should decrease startup time.
Resetting them afterward will ensure that normal operations don't suffer from a large GC periods.

The following is a table shows values from popular Emacs configurations.

| Distribution | gc-cons-threshold |
|--------------+-------------------|
| Default      |            800000 |
| Doom         |          16777216 |
| Spacemacs    |         100000000 |

#+begin_src emacs-lisp :lexical t
;;(setq gc-cons-threshold most-positive-fixnum
;;      gc-cons-percentage 1)
;;
;;(defun +gc-after-focus-change ()
;;  "Run GC when frame loses focus."
;;  (run-with-idle-timer
;;   5 nil
;;   (lambda () (unless (frame-focus-state) (garbage-collect)))))
#+end_src

#+begin_src emacs-lisp :lexical t
;;(defun +reset-init-values ()
;;  (run-with-idle-timer
;;   1 nil
;;   (lambda ()
;;     (setq file-name-handler-alist default-file-name-handler-alist
;;           gc-cons-percentage 0.1
;;           gc-cons-threshold 100000000)
;;     (message "gc-cons-threshold & file-name-handler-alist restored")
;;     (when (boundp 'after-focus-change-function)
;;       (add-function :after after-focus-change-function #'+gc-after-focus-change)))))
;;
;;(with-eval-after-load 'elpaca
;;  (add-hook 'elpaca-after-init-hook '+reset-init-values))
#+end_src


*** Graphical User Interface 

Emacs has a menu bar and tool bar by default. The menu bar is helpful to discover more functionality and access some commonly used commands. The tool bar is less useful, as it contains commands that are already in the menu bar. The following snippet contains the code for those two bars as well as the scroll bar. A value of 1 enables the functionality, while -1 disables it. Tweak those accordingly. 


#+begin_src emacs-lisp :lexical t
(menu-bar-mode 1)
(scroll-bar-mode -1)
(tool-bar-mode -1)
#+end_src

Prevent instructions on how to close an emacsclient frame.

#+begin_src emacs-lisp :lexical t
(setq server-client-instructions nil)
#+end_src

Implicitly resizing the Emacs frame adds to init time. Fonts larger than the system default can cause frame resizing, which adds to startup time.

#+begin_src emacs-lisp :lexical t
(setq frame-inhibit-implied-resize t)
#+end_src

Set default and backup fonts

#+begin_src emacs-lisp :lexical t
;;(push '(font . "Source Code Pro") default-frame-alist)
;;(set-face-font 'default "Source Code Pro")
;;(set-face-font 'variable-pitch "DejaVu Sans")
;;(copy-face 'default 'fixed-pitch)
#+end_src

Silence the bell function

#+begin_src emacs-lisp :lexical t
(setq ring-bell-function #'ignore
      inhibit-startup-screen t)
#+end_src


*** Put All Auto-Generated Configuration Files in a Separate File

Emacs has a graphical interface for modifying the variables that are intended for user configuration. Instead of writing Emacs Lisp code, the user clicks on buttons and filss in forms. This interface is accessed in a variety of ways, such as from the menu bar or with the command =M-x customize=.

When the user makes a modification in this way and requests to save it, Emacs will append a code block to the user's configuration file. Putting this code in a separate file makes it easier to reason about what is written by the user and what is generated by the running session. We thus add the following to the configuration file:

#+begin_src emacs-lisp
(setq custom-file (locate-user-emacs-file "custom.el"))
(load custom-file :no-error-if-file-is-missing)
#+end_src

Here we defined the value of the variable =custom-file= to be what the function call =(locate-user-emacs-file "custom.el")= returns. 


*** Provide early-init

#+begin_src emacs-lisp :lexical t
;;(provide 'early-init)
;;; early-init.el ends here
#+end_src
