#+TITLE: TJB's Literate Emacs Config
#+PROPERTY: header-args:emacs-lisp :tangle config.el :mkdirp yes
#+STARTUP: showeverything


* Bootstrap use-package with elpaca

#+begin_src emacs-lisp
(elpaca elpaca-use-package
  (elpaca-use-package-mode))

;; Install other packages automatically by default
(setq use-package-always-ensure t)
#+end_src


* Sane Defaults

** Spaces > tabs?

#+begin_src emacs-lisp
(setq-default indent-tabs-mode nil)
#+end_src

** Native compilation

TODO: Figure out why this is causing problems! Turn it off for now to prevent a billion warning messages.

Update: It's not working!

#+begin_src emacs-lisp
(setq native-comp-speed -1)  ; Disable native compilation
#+end_src

** UI Tweaks 

#+begin_src emacs-lisp
;; Already set in early-init.el for startup performance
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
(setq ring-bell-function 'ignore)
(global-hl-line-mode 1)
(global-display-line-numbers-mode 1)
(prefer-coding-system 'utf-8)
#+end_src


* Auto-tangle on save

#+begin_src emacs-lisp
(defun my/org-babel-tangle-config ()
  (when (string-equal (buffer-file-name)
                      (expand-file-name "config.org" user-emacs-directory))
    (let ((org-confirm-babel-evaluate nil))
      (org-babel-tangle))))
(add-hook 'org-mode-hook
          (lambda () (add-hook 'after-save-hook #'my/org-babel-tangle-config nil t)))
#+end_src


* Hot Reload

I make a ton of changes of my =init-file=. I want to be able to do a hot reload. 

#+begin_src 
;; Hot reload from init-file

(global-set-key (kbd "C-c r") (lambda () (interactive) (load-file user-init-file)))
#+end_src


* Evil Mode

It's not /evil/, it's just misunderstood! 

#+begin_src emacs-lisp
;; Evil

(use-package evil
  :init
  (setq evil-want-integration t
        evil-want-keybinding nil)
  :config
  (evil-mode 1))

(use-package evil-collection
  :after evil
  :config
  ;; Do not uncomment this unless you want to specify each and every mode
  ;; that evil-collection should works with.  The following line is here 
  ;; for documentation purposes in case you need it.  
  ;; (setq evil-collection-mode-list '(calendar dashboard dired ediff info magit ibuffer))
  (add-to-list 'evil-collection-mode-list 'help) ;; evilify help mode
  (evil-collection-init))

(use-package evil-tutor)
#+end_src


* Neotree

Neotree is a file tree viewer.  When you open neotree, it jumps to the current file thanks to neo-smart-open.  The neo-window-fixed-size setting makes the neotree width be adjustable.  NeoTree provides following themes: classic, ascii, arrow, icons, and nerd.  Theme can be config'd by setting "two" themes for neo-theme: one for the GUI and one for the terminal.  I like to use 'SPC t' for 'toggle' keybindings, so I have used 'SPC t n' for toggle-neotree.

| COMMAND        | DESCRIPTION                 | KEYBINDING |
|----------------+-----------------------------+------------|
| neotree-toggle | /Toggle neotree/            | SPC t n    |
| neotree-dir    | /Open directory in neotree/ | SPC d n    |


#+begin_src emacs-lisp
;; Neotree

(use-package neotree
  :config
  (setq neo-smart-open t
        neo-show-hidden-files t
        neo-window-width 55
        neo-window-fixed-size nil
        inhibit-compacting-font-caches t
        projectile-switch-project-action 'neotree-projectile-action) 
        ;; truncate long file names in neotree
        (add-hook 'neo-after-create-hook
           #'(lambda (_)
               (with-current-buffer (get-buffer neo-buffer-name)
                 (setq truncate-lines t)
                 (setq word-wrap nil)
                 (make-local-variable 'auto-hscroll-mode)
                 (setq auto-hscroll-mode nil)))))
#+end_src


* which-key

#+begin_src emacs-lisp
(use-package which-key
  :init
  (setq which-key-idle-delay 0.8)  ;; delay in seconds before popup
  :config
  (which-key-mode))
#+end_src

#+begin_src emacs-lisp
(setq which-key-max-description-length 50)
(setq which-key-separator " → " )
(setq which-key-prefix-prefix "+")
(setq which-key-allow-imprecise-window-fit t)
#+end_src

** Which-key appearance (customized for ef-dream)

#+begin_src emacs-lisp
(with-eval-after-load 'which-key
  (set-face-attribute 'which-key-key-face nil :weight 'bold)
  (set-face-attribute 'which-key-separator-face nil :foreground "gray60")
  (set-face-attribute 'which-key-note-face nil :foreground "orchid")
  (set-face-attribute 'which-key-command-description-face nil :foreground "light steel blue")
  (set-face-attribute 'which-key-local-map-description-face nil :foreground "light salmon"))
#+end_src


* general.el — Leader Key and Keybindings

#+begin_src emacs-lisp
(use-package general
  :demand t
  :config
  (general-create-definer tjb/leader-key
    :keymaps '(normal visual emacs)
    :prefix "SPC"
    :global-prefix "C-SPC")

  (tjb/leader-key
    ;; Files
    "f"  '(:ignore t :which-key "files")
    "f f" '(find-file :which-key "find file")
    "f r" '(recentf-open-files :which-key "recent files")

    ;; Buffers
    "b"  '(:ignore t :which-key "buffers")
    "b b" '(switch-to-buffer :which-key "switch buffer")
    "b k" '(kill-buffer :which-key "kill buffer")

    ;; Dired 
    "d" '(:ignore t :which-key "Dired")
    "d d" '(dired :which-key "Open dired")
    "d j" '(dired-jump :which-key "Dired jump to current")
    "d n" '(neotree-dir :which-key "Open directory in neotree")

    ;; Eshell
    "e" '(:ignore t :which-key "Eshell")
    "e s" '(eshell :which-key "Eshell")

    ;; gptel
    "g" '(:ignore t :which-key "gptel")
    "g s" '(gptel-send :which-key "send")
    "g a" '(gptel-abort :which-key "abort")
    "g M" '(gptel-menu :which-key "menu") 
    
    ;; LSP
    "l" '(:ignore t :which-key "lsp")
    "l r" '(lsp-rename :which-key "rename symbol")
    "l a" '(lsp-execute-code-action :which-key "code action")
    "l d" '(lsp-find-definition :which-key "go to def")
    "l t" '(lsp-find-type-definition :which-key "type def")
    "l i" '(lsp-find-implementation :which-key "implementation")
    "l e" '(lsp-treemacs-errors-list :which-key "errors")

    ;; Org 
    "m" '(:ignore t :which-key "Org")
    "m a" '(org-agenda :which-key "Org agenda")
    "m B" '(org-babel-tangle :which-key "Org babel tangle")
    "m e" '(org-export-dispatch :which-key "Org export dispatch")
    "m i" '(org-toggle-item :which-key "Org toggle item")
    "t n" '(neotree-toggle :which-key "Toggle neotree file viewer")
    "m t" '(org-todo :which-key "Org todo")
    "m T" '(org-todo-list :which-key "Org todo list")


    ;; Orgroam
    "r" '(:ignore t :which-key "Orgroam")
    "r f" '(org-roam-node-find :which-key "Orgroam find node")
    "r i" '(org-roam-node-insert :which-key "Orgroam insert node")
    "r t" '(org-roam-dailies-capture-today :which-key "Orgroam dailies capture today")

    ;; Toggles
    "t" '(:ignore t :which-key "toggles")
    "t e" '(eshell-toggle :which-key "Toggle eshell")
    "t l" '(display-line-numbers-mode :which-key "line numbers")
    "t r" '(org-roam-buffer-toggle :which-key "Orgroam buffer toggle")
    "t t" '(visual-line-mode :which-key "soft wrap lines")
    "t v" '(vterm-toggle :which-key "toggle vterm")

    ;; Windows
    "w" '(:ignore t :which-key "windows")
    "w v" '(split-window-right :which-key "split vertically")
    "w s" '(split-window-below :which-key "split horizontally")
    "w d" '(delete-window :which-key "delete window")
    "w o" '(delete-other-windows :which-key "delete others")
    "w h" '(windmove-left :which-key "move left")
    "w l" '(windmove-right :which-key "move right")
    "w j" '(windmove-down :which-key "move down")
    "w k" '(windmove-up :which-key "move up")

    ;; Git (Magit)
    "g" '(:ignore t :which-key "git")
    "g g" '(magit-status :which-key "status")))
#+end_src

#+begin_src emacs-lisp
(setq which-key-show-prefix 'top)
#+end_src


* Org

** Enabling Table of Contents

#+begin_src emacs-lisp :lexical t
;; Org 

(use-package toc-org
    :commands toc-org-enable
    :init (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src


** Enabling Org Bullets

Org-bullets gives us attractive bullets rather than asterisks.

#+begin_src emacs-lisp :lexical t
(add-hook 'org-mode-hook 'org-indent-mode)
(use-package org-bullets)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src


** Org Level Headers

#+begin_src emacs-lisp
;; (custom-set-faces
;;  '(org-level-1 ((t (:inherit outline-1 :height 1.5))))
;;  '(org-level-2 ((t (:inherit outline-2 :height 1.4))))
;;  '(org-level-3 ((t (:inherit outline-3 :height 1.3))))
;;  '(org-level-4 ((t (:inherit outline-4 :height 1.2))))
;;  '(org-level-5 ((t (:inherit outline-5 :height 1.1))))
;;  '(org-level-6 ((t (:inherit outline-5 :height 1.0))))
;;  '(org-level-7 ((t (:inherit outline-5 :height 0.9)))))
#+end_src


** Source Code Block Tag Expansion

Org-tempo is not a separate package but a module within org that can be enabled.  Org-tempo allows for '<s' followed by TAB to expand to a begin_src tag.  Other expansions available include:

| Typing the below + TAB | Expands to ...                          |
|------------------------+-----------------------------------------|
| <a                     | '#+BEGIN_EXPORT ascii' … '#+END_EXPORT  |
| <c                     | '#+BEGIN_CENTER' … '#+END_CENTER'       |
| <C                     | '#+BEGIN_COMMENT' … '#+END_COMMENT'     |
| <e                     | '#+BEGIN_EXAMPLE' … '#+END_EXAMPLE'     |
| <E                     | '#+BEGIN_EXPORT' … '#+END_EXPORT'       |
| <h                     | '#+BEGIN_EXPORT html' … '#+END_EXPORT'  |
| <l                     | '#+BEGIN_EXPORT latex' … '#+END_EXPORT' |
| <q                     | '#+BEGIN_QUOTE' … '#+END_QUOTE'         |
| <s                     | '#+BEGIN_SRC' … '#+END_SRC'             |
| <v                     | '#+BEGIN_VERSE' … '#+END_VERSE'         |

#+begin_src emacs-lisp 
(require 'org-tempo)
#+end_src


** Do not indent code blocks!

#+begin_src emacs-lisp
;; Don't indent code blocks automatically

(setq org-src-preserve-indentation nil
    org-edit-src-content-indentation 0) 
#+end_src


** Habits

#+begin_src emacs-lisp
;; Habits

(with-eval-after-load 'org
  (add-to-list 'org-modules 'org-habit t))
#+end_src


** Global Bibliography

#+begin_src emacs-lisp
;; Globabl bibliography file

(with-eval-after-load 'org
  (require 'oc-basic))
(setq org-cite-global-bibliography '("~/Dropbox/orgroam/biblio.bib"))
#+end_src


* Orgroam

#+begin_src emacs-lisp :mkdirp yes
;; Orgroam 

(use-package org-roam
  :ensure t
  ;;:init
  ;;(org-roam-v2-ack t)
  :custom
  (org-roam-v2-ack t)
  (org-directory "~/Dropbox/org")
  (org-roam-directory "~/Dropbox/orgroam/notes")
  (org-roam-dailies-directory "~/Dropbox/orgroam/dailies")
  ;; Set this above so don't need it here.
  ;; (org-cite-global-bibliography '("~/Dropbox/orgroam/biblio.bib"))
  (org-roam-completion-everywhere t)
  (org-roam-capture-templates
   '(("d" "default" plain
       "%?" :target
       (file+head "${slug}.org" "#+title: ${title}\n")
       :unnarrowed t)))
   ;; :bind (("C-c n l" . org-roam-buffer-toggle)
   ;;        ("C-c n f" . org-roam-node-find)
   ;;        ("C-c n i" . org-roam-node-insert)
   ;;        ("C-c n t" . org-roam-dailies-capture-today)
   ;;        ("C-c n a" . org-agenda)
   ;;        ;; ("C-c n b" . org-iswitchb)
   ;;        )
   :config
   (require 'oc-basic)
   (org-roam-setup))
#+end_src


* Git Magit

#+begin_src emacs-lisp :lexical t
(use-package magit
  :ensure t
  :commands (magit-status))
#+end_src

Require =transient=

#+begin_src emacs-lisp :lexical t
(use-package transient
  :ensure t)
#+end_src


* Theme 

#+begin_src emacs-lisp :lexical t
;; Get the standard themes
(use-package standard-themes)


;; Get modus themes 
(use-package modus-themes)


;; Get doom themes
(use-package doom-themes)

;; Prot's ef-melissa-dark 
(use-package ef-themes
  :config
  ;(load-theme 'ef-dark :no-confirm))
  (load-theme 'ef-melissa-dark :no-confirm))
#+end_src


* Modern Minibuffer Completion Stack

#+begin_src emacs-lisp :lexical t
;; Vertico for vertical minibuffer completion UI
(use-package vertico
  :init
  (vertico-mode))

;; Orderless for flexible matching (e.g. "f b" matches "find-buffer")
(use-package orderless
  :custom
  (completion-styles '(orderless basic))
  (completion-category-overrides '((file (styles partial-completion)))))

;; Marginalia for inline annotations (buffers, commands, etc.)
(use-package marginalia
  :init
  (marginalia-mode))

;; Consult for better M-x, buffer switching, grep, etc.
(use-package consult
  :bind
  (("C-s" . consult-line)
   ("C-x b" . consult-buffer)
   ("M-y" . consult-yank-pop)))

;; Embark: minibuffer actions menu
(use-package embark
  :bind
  (("C-." . embark-act)         ;; alternative to right-click
   ("C-;" . embark-dwim)        ;; smarter default action
   ("C-h B" . embark-bindings)) ;; describe-bindings alternative
  :init
  (setq prefix-help-command #'embark-prefix-help-command))

;; Optional: combine embark + consult
(use-package embark-consult
  :after (embark consult))

;; Corfu: popup in-buffer completions
(use-package corfu
  :init
  (global-corfu-mode)
  :custom
  (corfu-auto t)
  (corfu-cycle t)
  (corfu-preview-current nil))

;; Optional: add icons to completion popup (requires nerd-icons)
;; (use-package nerd-icons-corfu
;;   :after corfu
;;   :init (add-to-list 'corfu-margin-formatters #'nerd-icons-corfu-formatter))
#+end_src


#+begin_src emacs-lisp :lexical t
(setq completion-ignore-case t
      read-file-name-completion-ignore-case t
      read-buffer-completion-ignore-case t)
#+end_src


* Language Server Protocol (LSP) Support

#+begin_src emacs-lisp :lexical t
(use-package lsp-mode
  :commands (lsp lsp-deferred)
  :hook ((python-mode . lsp-deferred)
         (julia-mode . lsp-deferred))
  :init
  (setq lsp-keymap-prefix "C-c l")  ;; optional, use `which-key` for discoverability
  :config
  (setq lsp-enable-symbol-highlighting t
        lsp-enable-on-type-formatting nil
        lsp-headerline-breadcrumb-enable t))

(use-package lsp-ui
  :after lsp-mode
  :commands lsp-ui-mode
  :config
  (setq lsp-ui-doc-enable t
        lsp-ui-doc-position 'at-point
        lsp-ui-sideline-enable t
        lsp-ui-sideline-show-hover t
        lsp-ui-sideline-show-diagnostics t))
#+end_src


* Julia

#+begin_src emacs-lisp :lexical t
;;; Julia 

;; julia-mode
(use-package julia-mode
  :mode "\\.jl\\'")

;; julia: lsp support (ensure LanguageServer.jl is installed in Julia)
(use-package lsp-julia
  :after lsp-mode
  :config
  (setq lsp-julia-default-environment "~/.julia/environments/v1.11")) 

;; org-babel for julia
(org-babel-do-load-languages
 'org-babel-load-languages
 '((julia . t)))

(use-package ob-julia
  :ensure nil ;; built-in if Org is recent
  :after org)
#+end_src


* Modeline

The modeline is the bottom status bar that appears in Emacs windows.  While you can create your own custom modeline, why go to the trouble when Doom Emacs already has a nice modeline package available.  For more information on what is available to configure in the Doom modeline, check out: [[https://github.com/seagle0128/doom-modeline][Doom Modeline]]

#+begin_src emacs-lisp :lexical t
(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1)
  :config
  (setq doom-modeline-height 25      ;; sets modeline height
        doom-modeline-bar-width 5    ;; sets right bar width
        doom-modeline-persp-name t   ;; adds perspective name to modeline
        doom-modeline-persp-icon t)) ;; adds folder icon next to persp name
#+end_src


* Shells and Terminals 

** Eshell

Eshell is an Emacs 'shell' that is written in Elisp.

#+begin_src emacs-lisp
(use-package eshell-toggle
  :custom
  (eshell-toggle-size-fraction 3)
  ;;(eshell-toggle-use-projectile-root t)
  (eshell-toggle-run-command nil)
  (eshell-toggle-init-function #'eshell-toggle-init-ansi-term))

  (use-package eshell-syntax-highlighting
    :after esh-mode
    :config
    (eshell-syntax-highlighting-global-mode +1))

  ;; eshell-syntax-highlighting -- adds fish/zsh-like syntax highlighting.
  ;; eshell-rc-script -- your profile for eshell; like a bashrc for eshell.
  ;; eshell-aliases-file -- sets an aliases file for the eshell.

  (setq eshell-rc-script (concat user-emacs-directory "eshell/profile")
        eshell-aliases-file (concat user-emacs-directory "eshell/aliases")
        eshell-history-size 5000
        eshell-buffer-maximum-lines 5000
        eshell-hist-ignoredups t
        eshell-scroll-to-bottom-on-input t
        eshell-destroy-buffer-when-process-dies t
        eshell-visual-commands'("bash" "fish" "htop" "ssh" "top" "zsh"))
#+end_src


** Vterm

TODO: configure this a bit! 

Vterm is a terminal emulator within Emacs.  The 'shell-file-name' setting sets the shell to be used in M-x shell, M-x term, M-x ansi-term and M-x vterm.  By default, the shell is set to 'fish' but could change it to 'bash' or 'zsh' if you prefer.


#+begin_src emacs-lisp
(use-package exec-path-from-shell
  :ensure t
  :config
  (when (memq window-system '(mac ns x))
    (exec-path-from-shell-initialize)))
#+end_src

#+begin_src emacs-lisp
  (use-package vterm
  :ensure t
  :config
  (setq shell-file-name "/bin/sh"
        vterm-max-scrollback 5000))
#+end_src

#+begin_src emacs-lisp
(use-package vterm-toggle
  :after vterm
  :config
  ;; When running programs in Vterm and in 'normal' mode, make sure that ESC
  ;; kills the program as it would in most standard terminal programs.
  (evil-define-key 'normal vterm-mode-map (kbd "<escape>") 'vterm--self-insert)
  (setq vterm-toggle-fullscreen-p nil)
  (setq vterm-toggle-scope 'project)
  (add-to-list 'display-buffer-alist
               '((lambda (buffer-or-name _)
                     (let ((buffer (get-buffer buffer-or-name)))
                       (with-current-buffer buffer
                         (or (equal major-mode 'vterm-mode)
                             (string-prefix-p vterm-buffer-name (buffer-name buffer))))))
                  (display-buffer-reuse-window display-buffer-at-bottom)
                  ;;(display-buffer-reuse-window display-buffer-in-direction)
                  ;;display-buffer-in-direction/direction/dedicated is added in emacs27
                  ;;(direction . bottom)
                  ;;(dedicated . t) ;dedicated is supported in emacs27
                  (reusable-frames . visible)
                  (window-height . 0.4))))
#+end_src


* Transparency

With Emacs version 29, true transparency has been added.  I have turned transparency off by setting the alpha to '100'.  If you want some slight transparency, try setting alpha to '90'.  Of course, if you set alpha to '0', the background of Emacs would completely transparent.

TODO: Fix this. It isn't working (though not sure I even want it!)

#+begin_src emacs-lisp

;;(add-to-list 'default-frame-alist '(alpha-background . 50)) ; For all new frames henceforth

#+end_src 


* gptel

Holy crap! Check this out: https://www.youtube.com/watch?v=bsRnh_brggM

#+begin_src emacs-lisp
(use-package gptel
  :ensure (:host github :repo "karthink/gptel")
  :config
  (setq gptel-api-key
        (auth-source-pick-first-password
         :host "api.openai.com"
         :user "apikey")))
#+end_src
