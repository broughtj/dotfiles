#+title: TJB's Literate Emacs Configuration
#+author: Tyler J. Brough 
#+email: broughtj@gmail.com
#+language: en
#+options: ':t toc:nil num:t author:t email:t
#+startup: content indent
#+property: header-args:emacs-lisp :tangle ./init.el :noweb yes

* Introduction 

I am trying to follow [[https://protesilaos.com/][Prot's]] configuration, but it is super complicated and way over my head /for now/. Prot has a nice post on [[https://protesilaos.com/codelog/2024-11-28-basic-emacs-configuration/][Emacs: a basic and capable configuration]]. My plan is to start with a literate version of his basic setup and then work my way forward as I learn and grow into the wild welter of Emacs. 

Other helpful and informative sources that I have been learning from: 

+ [[https://www.youtube.com/playlist?list=PL5--8gKSku15e8lXf7aLICFmAHQVo0KXX][DT's Configuring Emacs]] from scratch YouTube series. I especially like that he is using the [[https://github.com/progfolio/elpaca][elpaca]] package manager. 
+ Apparently the maintainer of the =straight.el= package manager now recommends =elpaca.el=. See this Reddit post: https://www.reddit.com/r/emacs/comments/1dnvp9n/elpaca_vs_straightel_is_one_clearly_better_or_is/ (for which he is also the main dev). 
+ Given that, I would imagine his setup is worth looking at as well: [[https://github.com/progfolio/.emacs.d][progfolio's .emacs.d]].
+ Also, /Systems Crafters/ also has an [[https://www.youtube.com/playlist?list=PLEoMzSkcN8oPH1au7H6B7bBJ4ZO7BXjSZ][Emacs from Scratch]] series. 
+ Prot doesn't seem to use [[https://github.com/emacs-evil/evil][Evil]], which is a must for me. So I will learn what I can from these other three setups. 


* Where To Store the Configuration Files


Emacs provides lots of possibilities, starting with where to put the main configuration file. In the interest of not overwhelming the user, I am being opinionated with certain choices: 

+ =~/.emacs.d/init.el= for your configuration files.
+ If there is an =~/.emacs= file on your system, make sure to delete it (or rename it if you care about its contents). Otherwise, Emacs will prioritize that over your =~/.emacs.d/init.el=.

* Turn on Lexical Binding

#+begin_src emacs-lisp :lexical t
;; -*- lexical-binding: t; -*-
#+end_src


* Set Up the =elpaca= Package Manager

Here I am departing from Prot's basic setup because I want to jump immediately into using =elpaca= as my package manager. I will adapt progfolio's approach for my purposes here. My thought is that given that he is the developer of =elpaca= he ought to know something about how to configure it properly. 


** Elpaca 

#+begin_quote
An elisp package manager

https://github.com/progfolio/elpaca
#+end_quote


*** Installer

#+begin_src emacs-lisp :lexical t

(defvar elpaca-installer-version 0.11)
(defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
(defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
(defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
(defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                              :pre-build ("git" "remote" "set-url" "origin" "git@github.com:progfolio/elpaca.git")
                              :ref nil :depth 1 :inherit ignore
                              :files (:defaults "elpaca-test.el" (:exclude "extensions"))
                              :build (:not elpaca--activate-package)))
(let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
       (build (expand-file-name "elpaca/" elpaca-builds-directory))
       (order (cdr elpaca-order))
       (default-directory repo))
  (add-to-list 'load-path (if (file-exists-p build) build repo))
  (unless (file-exists-p repo)
    (make-directory repo t)
    (when (<= emacs-major-version 28) (require 'subr-x))
    (condition-case-unless-debug err
        (if-let* ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                  ((zerop (apply #'call-process `("git" nil ,buffer t "clone"
                                                  ,@(when-let* ((depth (plist-get order :depth)))
                                                      (list (format "--depth=%d" depth) "--no-single-branch"))
                                                  ,(plist-get order :repo) ,repo))))
                  ((zerop (call-process "git" nil buffer t "checkout"
                                        (or (plist-get order :ref) "--"))))
                  (emacs (concat invocation-directory invocation-name))
                  ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                        "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                  ((require 'elpaca))
                  ((elpaca-generate-autoloads "elpaca" repo)))
            (progn (message "%s" (buffer-string)) (kill-buffer buffer))
          (error "%s" (with-current-buffer buffer (buffer-string))))
      ((error) (warn "%s" err) (delete-directory repo 'recursive))))
  (unless (require 'elpaca-autoloads nil t)
    (require 'elpaca)
    (elpaca-generate-autoloads "elpaca" repo)
    (let ((load-source-file-function nil)) (load "./elpaca-autoloads"))))
(add-hook 'after-init-hook #'elpaca-process-queues)
(elpaca `(,@elpaca-order))
(setq elpaca-queue-limit 30)
#+end_src

#+begin_src emacs-lisp :lexical t
(setq elpaca-menu-org-make-manual nil)
(with-eval-after-load 'evil
  (evil-make-intercept-map elpaca-ui-mode-map))
#+end_src


** Packaging

*** use-package

#+begin_src emacs-lisp :lexical t
(defmacro use-feature (name &rest args)
  "`use-package' for packages which do not require installation.
  See `use-package' for NAME and ARGS."
  (declare (indent defun))
  `(use-package ,name
     :ensure nil
     ,@args))
#+end_src

#+begin_src emacs-lisp :lexical t
(elpaca elpaca-use-package
  (require 'elpaca-use-package)
  (elpaca-use-package-mode)
  (setq use-package-always-ensure t))
#+end_src

#+begin_src emacs-lisp :lexical t
(if debug-on-error
    (setq use-package-verbose t
          use-package-expand-minimally nil
          use-package-compute-statistics t)
  (setq use-package-verbose nil
        use-package-expand-minimally t))
#+end_src

* Use the Preferred Fonts

Fonts are an integral part of the text-centric Emacs experience. With the following snippet, we configure the three "faces" that are used to specify font families. Emacs has the concept of a "face" for a bundle of text properties that include typographic properties (font family, font height, font weight, ...) and colors (text/foreground color, background color). 

#+begin_src emacs-lisp :lexical t
(let ((mono-spaced-font "JuliaMono")
      (proportionately-spaced-font "Sans"))
  (set-face-attribute 'default nil :family mono-spaced-font :height 135)
  (set-face-attribute 'fixed-pitch nil :family mono-spaced-font :height 1.0)
  (set-face-attribute 'variable-pitch nil :family proportionately-spaced-font :height 1.0))
#+end_src

The ~default~ face is the only one that must have an absolute ~:height~ value. Everything else uses a floating point, which is understood as a multiple of the ~default~.

Change the above snippet to use the preferred font family names. Also adjust the ~default~ height to a larger/smaller number.


* Choose a Theme and Tweak the Looks of Emacs

#+begin_src emacs-lisp :lexical t
;;(use-package modus-themes
;;  :ensure t
;;  :config
;;  (load-theme 'modus-vivendi-tinted :no-confirm-loading))
(use-package ef-themes
  :ensure t
  :config
  (load-theme 'ef-dream :no-confirm-loading))
#+end_src


* Use Icon Fonts in Various Places

Continuing with the stylistic refinements to Emacs, the following snippet will show complementary icons in the minibuffer and in Dired. To make this setup work, the user must type ~M-x~ and then call the command ~nerd-icons-install-fonts~. This will store the icon font files in a local directory. To be sure everything is working, a restart to Emacs will guarantee that the new font files are read. 

#+begin_src emacs-lisp :lexical t
(use-package nerd-icons
  :ensure t)

(use-package nerd-icons-completion
  :ensure t
  :after marginalia
  :config
  (add-hook 'marginalia-mode-hook #'nerd-icons-completion-marginalia-setup))

(use-package nerd-icons-corfu
  :ensure t
  :after corfu
  :config
  (add-to-list 'corfu-margin-formatters #'nerd-icons-corfu-formatter))

(use-package nerd-icons-dired
  :ensure t
  :hook
  (dired-mode . nerd-icons-dired-mode))
#+end_src


* Configure the Minibuffer and Related

The minibuffer is a central part of the Emacs experience. It is where the user interacts with Emacs to respond to prompts, switch to another buffer, open a new file, run a command by its full name, and so on. The default minibuffer is minimal, which might be good for experienced users, but does not help with discoverability. Instead of that, we use the ~vertico~ package to produce a vertical layout. This makes it easier to see what the available options are. 

#+begin_src emacs-lisp :lexical t
(use-package vertico
  :ensure t
  :hook (after-init . vertico-mode))
#+end_src

The ~marginalia~ package is a nice complement to the vertical layout, as it uses the free space to show helpful information about the options shown there. For example, when the user types ~M-x~ to see a list of command names, Marginalia will add a brief description of each command. Depending on the specifics of the minibuffer interaction (opening a file, selecting a buffer, ...), there will be the relevant information on display. 

#+begin_src emacs-lisp :lexical t
(use-package marginalia
  :ensure t
  :hook (after-init . marginalia-mode))
#+end_src

The ~orderless~ package offers a life-saver for all those cases where we do not remember the exact order of words. For example, to toggle the display of line numbers in the current buffer, we use the command ~M-x display-line-numbers-mode~. With ~orderless~ set up, we may type something like ~linum dis~ at the ~M-x~ prompt and still get the desired result. This is because Orderless matches the space-separated characters we provide in any order. Emacs has other pattern matching styles built-in, but ~orderless~ is a good place to start. We thus make sure the other relevant variables are set to a ~nil~ value, so that we get Orderless everywhere. 

#+begin_src emacs-lisp :lexical t
(use-package orderless
  :ensure t
  :config
  (setq completion-styles '(orderless basic))
  (setq completion-category-defaults nil)
  (setq completion-category-overrides nil))
#+end_src
